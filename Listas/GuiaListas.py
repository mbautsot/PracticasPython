# =============================================
# LISTAS EN PYTHON - GU√çA COMPLETA
# =============================================

print("=" * 60)
print("LISTAS EN PYTHON - M√âTODOS Y OPERACIONES")
print("=" * 60)

# =============================================
# 1. ¬øQU√â SON LAS LISTAS?
# =============================================

print("\n" + "=" * 30)
print("1. ¬øQU√â SON LAS LISTAS?")
print("=" * 30)

"""
Las listas son:
- Colecciones ordenadas y mutables de elementos
- Pueden contener diferentes tipos de datos
- Se definen con corchetes []
- Los elementos se separan por comas
"""

# Creaci√≥n de listas
lista_vacia = []
lista_numeros = [1, 2, 3, 4, 5]
lista_mixta = [1, "hola", 3.14, True, [1, 2, 3]]
lista_frutas = ["manzana", "banana", "naranja", "uva"]

print("üì¶ Lista vac√≠a:", lista_vacia)
print("üî¢ Lista de n√∫meros:", lista_numeros)
print("üé≠ Lista mixta:", lista_mixta)
print("üçé Lista de frutas:", lista_frutas)

# =============================================
# 2. ACCESO A ELEMENTOS
# =============================================

print("\n" + "=" * 30)
print("2. ACCESO A ELEMENTOS")
print("=" * 30)

# Indexaci√≥n positiva (0-based)
print("Primer elemento:", lista_frutas[0])      # manzana
print("Segundo elemento:", lista_frutas[1])     # banana
print("Tercer elemento:", lista_frutas[2])      # naranja

# Indexaci√≥n negativa (desde el final)
print("√öltimo elemento:", lista_frutas[-1])     # uva
print("Pen√∫ltimo elemento:", lista_frutas[-2])  # naranja

# Slicing (rebanado)
print("Primeros 2 elementos:", lista_frutas[0:2])    # ['manzana', 'banana']
print("Desde √≠ndice 1:", lista_frutas[1:])           # ['banana', 'naranja', 'uva']
print("√öltimos 2 elementos:", lista_frutas[-2:])     # ['naranja', 'uva']
print("Copia de lista:", lista_frutas[:])            # Copia completa

# =============================================
# 3. M√âTODOS DE MODIFICACI√ìN
# =============================================

print("\n" + "=" * 30)
print("3. M√âTODOS DE MODIFICACI√ìN")
print("=" * 30)

# ---------------------------------------------------
# 3.1 append() - Agrega elemento al final
# ---------------------------------------------------
print("\n3.1 append() - Agrega al final:")
frutas = ["manzana", "banana"]
print("Antes:", frutas)
frutas.append("naranja")
print("Despu√©s de append('naranja'):", frutas)

# ---------------------------------------------------
# 3.2 extend() - Extiende con otra lista
# ---------------------------------------------------
print("\n3.2 extend() - Extiende lista:")
verduras = ["zanahoria", "espinaca"]
print("Lista 1:", frutas)
print("Lista 2:", verduras)
frutas.extend(verduras)
print("Despu√©s de extend(verduras):", frutas)

# ---------------------------------------------------
# 3.3 insert() - Inserta en posici√≥n espec√≠fica
# ---------------------------------------------------
print("\n3.3 insert() - Inserta en posici√≥n:")
print("Antes:", frutas)
frutas.insert(1, "uva")  # Inserta en √≠ndice 1
print("Despu√©s de insert(1, 'uva'):", frutas)

# ---------------------------------------------------
# 3.4 remove() - Remueve primera ocurrencia
# ---------------------------------------------------
print("\n3.4 remove() - Remueve elemento:")
print("Antes:", frutas)
frutas.remove("banana")  # Remueve 'banana'
print("Despu√©s de remove('banana'):", frutas)

# ---------------------------------------------------
# 3.5 pop() - Remueve y retorna elemento
# ---------------------------------------------------
print("\n3.5 pop() - Remueve y retorna:")
print("Antes:", frutas)
elemento_eliminado = frutas.pop()  # Remueve el √∫ltimo
print("Elemento eliminado:", elemento_eliminado)
print("Despu√©s de pop():", frutas)

elemento_eliminado2 = frutas.pop(1)  # Remueve √≠ndice 1
print("Elemento eliminado (√≠ndice 1):", elemento_eliminado2)
print("Despu√©s de pop(1):", frutas)

# ---------------------------------------------------
# 3.6 clear() - Limpia toda la lista
# ---------------------------------------------------
print("\n3.6 clear() - Limpia lista:")
lista_temporal = [1, 2, 3, 4, 5]
print("Antes:", lista_temporal)
lista_temporal.clear()
print("Despu√©s de clear():", lista_temporal)

# ---------------------------------------------------
# 3.7 del - Elimina por √≠ndice
# ---------------------------------------------------
print("\n3.7 del - Elimina por √≠ndice:")
numeros = [10, 20, 30, 40, 50]
print("Antes:", numeros)
del numeros[2]  # Elimina √≠ndice 2 (30)
print("Despu√©s de del numeros[2]:", numeros)

# =============================================
# 4. M√âTODOS DE B√öSQUEDA
# =============================================

print("\n" + "=" * 30)
print("4. M√âTODOS DE B√öSQUEDA")
print("=" * 30)

lista_busqueda = ["a", "b", "c", "a", "d", "b", "e"]

# ---------------------------------------------------
# 4.1 index() - Encuentra √≠ndice de elemento
# ---------------------------------------------------
print("\n4.1 index() - Encuentra √≠ndice:")
print("Lista:", lista_busqueda)
print("√çndice de 'c':", lista_busqueda.index("c"))
print("√çndice de 'a' (despu√©s de √≠ndice 1):", lista_busqueda.index("a", 1))

# ---------------------------------------------------
# 4.2 count() - Cuenta ocurrencias
# ---------------------------------------------------
print("\n4.2 count() - Cuenta ocurrencias:")
print("Lista:", lista_busqueda)
print("Count de 'a':", lista_busqueda.count("a"))
print("Count de 'b':", lista_busqueda.count("b"))
print("Count de 'x':", lista_busqueda.count("x"))  # No existe

# ---------------------------------------------------
# 4.3 in - Verifica existencia
# ---------------------------------------------------
print("\n4.3 in - Verifica existencia:")
print("'c' est√° en lista:", "c" in lista_busqueda)
print("'z' est√° en lista:", "z" in lista_busqueda)

# =============================================
# 5. M√âTODOS DE ORDENAMIENTO
# =============================================

print("\n" + "=" * 30)
print("5. M√âTODOS DE ORDENAMIENTO")
print("=" * 30)

# ---------------------------------------------------
# 5.1 sort() - Ordena la lista
# ---------------------------------------------------
print("\n5.1 sort() - Ordena lista:")
numeros_desordenados = [3, 1, 4, 1, 5, 9, 2, 6]
print("Antes:", numeros_desordenados)
numeros_desordenados.sort()
print("Despu√©s de sort():", numeros_desordenados)

# Sort descendente
numeros_desordenados.sort(reverse=True)
print("Sort reverse=True:", numeros_desordenados)

# Sort con strings
frutas_desordenadas = ["naranja", "manzana", "banana", "uva"]
frutas_desordenadas.sort()
print("Frutas ordenadas:", frutas_desordenadas)

# ---------------------------------------------------
# 5.2 reverse() - Invierte la lista
# ---------------------------------------------------
print("\n5.2 reverse() - Invierte lista:")
lista_normal = [1, 2, 3, 4, 5]
print("Antes:", lista_normal)
lista_normal.reverse()
print("Despu√©s de reverse():", lista_normal)

# ---------------------------------------------------
# 5.3 sorted() - Funci√≥n que retorna lista ordenada
# ---------------------------------------------------
print("\n5.3 sorted() - Retorna lista ordenada:")
original = [3, 1, 4, 2]
ordenada = sorted(original)
print("Original:", original)
print("Ordenada:", ordenada)
print("Original no modificada:", original)

# =============================================
# 6. M√âTODOS DE COPIA
# =============================================

print("\n" + "=" * 30)
print("6. M√âTODOS DE COPIA")
print("=" * 30)

# ---------------------------------------------------
# 6.1 copy() - Copia superficial
# ---------------------------------------------------
print("\n6.1 copy() - Copia superficial:")
original = [1, 2, 3, [4, 5]]
copia = original.copy()
print("Original:", original)
print("Copia:", copia)

# Modificamos la copia
copia[0] = 99
copia[3][0] = 88  # Esto afecta a ambas listas
print("Despu√©s de modificar copia:")
print("Original:", original)  # [1, 2, 3, [88, 5]]
print("Copia:", copia)        # [99, 2, 3, [88, 5]]

# ---------------------------------------------------
# 6.2 copy.deepcopy() - Copia profunda
# ---------------------------------------------------
print("\n6.2 copy.deepcopy() - Copia profunda:")
import copy
original = [1, 2, 3, [4, 5]]
copia_profunda = copy.deepcopy(original)

copia_profunda[3][0] = 888
print("Original:", original)       # [1, 2, 3, [4, 5]]
print("Copia profunda:", copia_profunda)  # [1, 2, 3, [888, 5]]

# =============================================
# 7. OPERACIONES CON LISTAS
# =============================================

print("\n" + "=" * 30)
print("7. OPERACIONES CON LISTAS")
print("=" * 30)

lista1 = [1, 2, 3]
lista2 = [4, 5, 6]

# ---------------------------------------------------
# 7.1 Concatenaci√≥n (+)
# ---------------------------------------------------
print("\n7.1 Concatenaci√≥n (+):")
concatenada = lista1 + lista2
print(f"{lista1} + {lista2} = {concatenada}")

# ---------------------------------------------------
# 7.2 Repetici√≥n (*)
# ---------------------------------------------------
print("\n7.2 Repetici√≥n (*):")
repetida = lista1 * 3
print(f"{lista1} * 3 = {repetida}")

# ---------------------------------------------------
# 7.3 Longitud (len())
# ---------------------------------------------------
print("\n7.3 Longitud (len()):")
print(f"Longitud de {lista1}: {len(lista1)}")
print(f"Longitud de {concatenada}: {len(concatenada)}")

# ---------------------------------------------------
# 7.4 M√≠nimo y m√°ximo
# ---------------------------------------------------
print("\n7.4 M√≠nimo y m√°ximo:")
numeros = [10, 5, 20, 3, 15]
print(f"Lista: {numeros}")
print(f"M√≠nimo: {min(numeros)}")
print(f"M√°ximo: {max(numeros)}")

# ---------------------------------------------------
# 7.5 Suma
# ---------------------------------------------------
print("\n7.5 Suma:")
print(f"Suma de {numeros}: {sum(numeros)}")

# =============================================
# 8. LISTAS POR COMPRENSI√ìN
# =============================================

print("\n" + "=" * 30)
print("8. LISTAS POR COMPRENSI√ìN")
print("=" * 30)

# ---------------------------------------------------
# 8.1 Comprensi√≥n b√°sica
# ---------------------------------------------------
print("\n8.1 Comprensi√≥n b√°sica:")
cuadrados = [x**2 for x in range(1, 6)]
print(f"Cuadrados del 1-5: {cuadrados}")

# ---------------------------------------------------
# 8.2 Comprensi√≥n con condici√≥n
# ---------------------------------------------------
print("\n8.2 Comprensi√≥n con condici√≥n:")
pares = [x for x in range(10) if x % 2 == 0]
print(f"N√∫meros pares del 0-9: {pares}")

# ---------------------------------------------------
# 8.3 Comprensi√≥n con if-else
# ---------------------------------------------------
print("\n8.3 Comprensi√≥n con if-else:")
clasificacion = ["Par" if x % 2 == 0 else "Impar" for x in range(5)]
print(f"Par/Impar 0-4: {clasificacion}")

# ---------------------------------------------------
# 8.4 Comprensi√≥n anidada
# ---------------------------------------------------
print("\n8.4 Comprensi√≥n anidada:")
combinaciones = [(x, y) for x in [1, 2, 3] for y in [4, 5, 6]]
print(f"Combinaciones: {combinaciones}")

# =============================================
# 9. M√âTODOS ADICIONALES
# =============================================

print("\n" + "=" * 30)
print("9. M√âTODOS ADICIONALES")
print("=" * 30)

# ---------------------------------------------------
# 9.1 any() - Verifica si alg√∫n elemento es True
# ---------------------------------------------------
print("\n9.1 any() - Alg√∫n elemento True:")
lista_falsa = [False, 0, "", None]
lista_verdadera = [False, 0, "hola", None]
print(f"any({lista_falsa}): {any(lista_falsa)}")
print(f"any({lista_verdadera}): {any(lista_verdadera)}")

# ---------------------------------------------------
# 9.2 all() - Verifica si todos son True
# ---------------------------------------------------
print("\n9.2 all() - Todos True:")
lista_todos_true = [1, "hola", True, [1]]
lista_no_todos_true = [1, "hola", False, [1]]
print(f"all({lista_todos_true}): {all(lista_todos_true)}")
print(f"all({lista_no_todos_true}): {all(lista_no_todos_true)}")

# =============================================
# 10. EJEMPLOS PR√ÅCTICOS
# =============================================

print("\n" + "=" * 30)
print("10. EJEMPLOS PR√ÅCTICOS")
print("=" * 30)

# ---------------------------------------------------
# 10.1 Gesti√≥n de tareas
# ---------------------------------------------------
print("\n10.1 Gesti√≥n de tareas:")

tareas = ["Estudiar Python", "Hacer ejercicio", "Leer libro"]
print("Tareas iniciales:", tareas)

# Agregar nueva tarea
tareas.append("Preparar cena")
print("Despu√©s de agregar:", tareas)

# Marcar tarea como completada
tarea_completada = tareas.pop(1)
print(f"Tarea completada: {tarea_completada}")
print("Tareas pendientes:", tareas)

# ---------------------------------------------------
# 10.2 An√°lisis de datos
# ---------------------------------------------------
print("\n10.2 An√°lisis de datos:")

ventas = [150, 200, 175, 300, 225, 250, 400]
print("Ventas diarias:", ventas)

# Estad√≠sticas b√°sicas
print(f"Total ventas: {sum(ventas)}")
print(f"Promedio ventas: {sum(ventas)/len(ventas):.2f}")
print(f"Venta m√°xima: {max(ventas)}")
print(f"Venta m√≠nima: {min(ventas)}")

# Ventas sobre 200
ventas_altas = [venta for venta in ventas if venta > 200]
print("Ventas sobre 200:", ventas_altas)

# ---------------------------------------------------
# 10.3 Procesamiento de texto
# ---------------------------------------------------
print("\n10.3 Procesamiento de texto:")

texto = "Python es un lenguaje de programaci√≥n poderoso y vers√°til"
palabras = texto.split()
print("Palabras:", palabras)

# Palabras con m√°s de 5 letras
palabras_largas = [palabra for palabra in palabras if len(palabra) > 5]
print("Palabras con m√°s de 5 letras:", palabras_largas)

# =============================================
# 11. RESUMEN DE M√âTODOS
# =============================================

print("\n" + "=" * 30)
print("11. RESUMEN DE M√âTODOS")
print("=" * 30)

metodos = [
    "append(x) - Agrega x al final",
    "extend(iterable) - Extiende la lista",
    "insert(i, x) - Inserta x en posici√≥n i",
    "remove(x) - Remueve primera ocurrencia de x",
    "pop([i]) - Remueve y retorna elemento en posici√≥n i",
    "clear() - Remueve todos los elementos",
    "index(x) - Retorna √≠ndice de x",
    "count(x) - Cuenta ocurrencias de x",
    "sort() - Ordena la lista",
    "reverse() - Invierte la lista",
    "copy() - Retorna copia superficial"
]

for i, metodo in enumerate(metodos, 1):
    print(f"{i:2d}. {metodo}")

# =============================================
# 12. EJERCICIOS PR√ÅCTICOS
# =============================================

print("\n" + "=" * 30)
print("12. EJERCICIOS PR√ÅCTICOS")
print("=" * 30)

print("""
1. Crea una lista con 10 n√∫meros y calcula:
   - Suma total
   - Promedio
   - N√∫meros pares
   - N√∫meros mayores al promedio

2. Implementa una funci√≥n que elimine duplicados
   de una lista manteniendo el orden

3. Crea un sistema de gesti√≥n de inventario
   usando listas con operaciones CRUD

4. Escribe una funci√≥n que encuentre el
   segundo n√∫mero m√°s grande en una lista

5. Crea una lista de compras interactiva
   que permita agregar, remover y listar items
""")

print("\n" + "=" * 60)
print("¬°FIN DE LA GU√çA DE LISTAS!")
print("=" * 60)

# Informaci√≥n adicional
print(f"\nüí° Tip: Practica con los ejercicios propuestos")
print("üöÄ Ejecuta: python listas.py para ver todos los ejemplos")
print("üìö Documentaci√≥n: https://docs.python.org/3/tutorial/datastructures.html")