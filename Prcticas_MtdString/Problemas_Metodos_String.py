# =============================================
# 30 PROBLEMAS COMPLEJOS DE M√âTODOS DE STRINGS
# =============================================
import unicodedata

print("=" * 50)
print("30 PROBLEMAS DE M√âTODOS DE STRINGS")
print("=" * 50)


# Problema 1
def problema_1(email:str)-> bool:
    """
    VALIDACI√ìN DE EMAIL:
    Crea una funci√≥n que valide si un email es v√°lido.
    Debe contener un '@', no empezar ni terminar con '@',
    y tener al menos un punto despu√©s del '@'.
    """
    #email = "usuario@dominio.com"
    # Tu c√≥digo aqu√≠
    valid_email = True

    if '@' not in email:
        valid_email = False
    if email.startswith('@') or email.endswith('@'):
        valid_email = False

        # Dividir en usuario y dominio
    partes = email.split('@')
    if len(partes) != 2:
        valid_email = False

    dominio = partes[1]
    if '.' not in dominio:
        valid_email = False

    return valid_email


# Problema 2
def problema_2(email:str):
    """
    EXTRACCI√ìN DE DOMINIO:
    Dado un email, extrae solo el dominio (lo que va despu√©s del '@').
    """
    #email = "usuario@empresa.com.mx"
    # Tu c√≥digo aqu√≠
    dominio = email.split('@')[1]

    return dominio


# Problema 3
def problema_3(tarjeta:str):
    """
    ENMASCARAR TARJETA:
    Toma un n√∫mero de tarjeta y enmascara todos los d√≠gitos
    excepto los primeros 4 y √∫ltimos 4.
    """
   # numTarjeta = "1234567890123456"
    # Tu c√≥digo aqu√≠
    trj =''
    if len(tarjeta)< 16:
        trj = 'N√∫mero de tarjeta invalido, Debe de tener 16 digitos'
    elif not tarjeta.isdigit():
        trj ='N√∫mero de tarjeta invalido, Solo debe contener d√≠gitos'
    else:
        return tarjeta[:4] + '*' * 8 + tarjeta[-4:]

    return trj


# Problema 4
def problema_4(telefono:str):
    """
    FORMATEAR N√öMERO TELEF√ìNICO:
    Convierte '5512345678' a formato '(55) 1234-5678'
    """
    #telefono = "5512345678"
    # Tu c√≥digo aqu√≠
    # Reultado esperado "(55) 1234-5678"


    if(not telefono.isdigit()) or (len(telefono) != 10):
        return 'El numero telefonico es erroneo'

    return f'({telefono[:2]}) {telefono[2:6]}-{telefono[6:]}'


# Problema 5
def problema_5(texto:str) -> int: #El -> int se llama type hint de retorno o annotation de retorno.

    """
    CONTADOR DE PALABRAS:
    Cuenta cu√°ntas palabras hay en un texto, ignorando espacios extras.
    """
    # STRIP Eliminar espacios al inicio y final, luego dividir por espacios
    #"  Python   es   un   lenguaje   incre√≠ble  "
    #texto_strip = texto.strip()
    #print(texto_strip)#Python   es   un   lenguaje   incre√≠ble (SIN ESPACIOS INICIO Y FINAL)
    #texto_split = texto_strip.split()
    #print(texto_split) #Divide el texto en una lista de palabras, ignorando m√∫ltiples espacios entre palabras
    # Tu c√≥digo aqu√≠
    return len(texto.strip().split())


# Problema 6
def problema_6(frase:str) -> str:
    """
    INVERSI√ìN DE PALABRAS:
    Invierte el orden de las palabras en una frase.
    "hola mundo" -> "mundo hola"
    """
    #frase = "Python es genial"
    # Tu c√≥digo aqu√≠
   # frase = frase.split()
   # frase.reverse()
   #La clave es usar ' '.join() para convertir la lista de palabras de vuelta a un string, uni√©ndolas con espacios.
   # return ' '.join(frase)

    #VERSION MAS COMPACTA
    return ' '.join(reversed(frase.split()))


# Problema 7
def problema_7(texto:str) -> str:
    """
    ELIMINAR ACENTOS:
    Remueve acentos y caracteres especiales de un texto.
    """
    texto = "√°√©√≠√≥√∫√±√ë√ß√á"
    # Tu c√≥digo aqu√≠
    mapa_caracteres_especiales = {
        '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u',
        '√†': 'a', '√®': 'e', '√¨': 'i', '√≤': 'o', '√π': 'u',
        '√§': 'a', '√´': 'e', '√Ø': 'i', '√∂': 'o', '√º': 'u',
        '√¢': 'a', '√™': 'e', '√Æ': 'i', '√¥': 'o', '√ª': 'u',
        '√±': 'n', '√ß': 'c',
        '√Å': 'A', '√â': 'E', '√ç': 'I', '√ì': 'O', '√ö': 'U',
        '√Ä': 'A', '√à': 'E', '√å': 'I', '√í': 'O', '√ô': 'U',
        '√Ñ': 'A', '√ã': 'E', '√è': 'I', '√ñ': 'O', '√ú': 'U',
        '√Ç': 'A', '√ä': 'E', '√é': 'I', '√î': 'O', '√õ': 'U',
        '√ë': 'N', '√á': 'C'
    }

    txt_sinacentos = []

    for caracter in texto:
        if caracter in mapa_caracteres_especiales:
            print(f'caracter : {caracter}')
            txt_sinacentos.append(mapa_caracteres_especiales[caracter])
        else:
            print(f'else caracter : {caracter}')
            txt_sinacentos.append(caracter)

    return ''.join(txt_sinacentos)


'''
üìö Explicaci√≥n detallada:
1. resultado = []
Creamos una lista vac√≠a donde guardaremos los caracteres procesados

Es como un "contenedor temporal" para el resultado

2. for caracter in texto:
texto: Es el string de entrada (ej: "caf√©")

caracter: Variable que toma cada letra individual:

1¬™ iteraci√≥n: caracter = "c"

2¬™ iteraci√≥n: caracter = "a"

3¬™ iteraci√≥n: caracter = "f"

4¬™ iteraci√≥n: caracter = "√©"

3. if caracter in mapa_acentos:
mapa_acentos: ¬°S√ç! Es un diccionario (key-value pairs)

in: Verifica si la clave existe en el diccionario

Ejemplo: "√©" in mapa_acentos ‚Üí True (porque "√©" es una clave)

4. resultado.append(mapa_acentos[caracter])
mapa_acentos[caracter]: Accede al valor correspondiente a la clave

Ejemplo: mapa_acentos["√©"] ‚Üí devuelve "e"

resultado.append("e"): Agrega "e" a la lista

5. else: resultado.append(caracter)
Si el car√°cter NO est√° en el diccionario (no tiene acento)

Lo agregamos tal cual a la lista

Ejemplo: "c" ‚Üí no est√° en mapa_acentos ‚Üí se agrega "c"

6. return ''.join(resultado)
resultado: Lista con caracteres procesados ‚Üí ["c", "a", "f", "e"]

''.join(resultado): Une todos los elementos de la lista en un string

Resultado final: "cafe"


'''

# Problema 8
def problema_8():
    """
    GENERAR USERNAME:
    Crea un username a partir de nombre y apellido.
    "Juan P√©rez" -> "juan.perez"
    """
    nombre = "Mar√≠a Garc√≠a L√≥pez"
    # Tu c√≥digo aqu√≠
    return "maria.garcia.lopez"


# Problema 9
def problema_9():
    """
    VALIDAR CONTRASE√ëA:
    Verifica que una contrase√±a tenga al menos:
    8 caracteres, 1 may√∫scula, 1 min√∫scula, 1 n√∫mero, 1 especial.
    """
    password = "Passw0rd!"
    # Tu c√≥digo aqu√≠
    return True


# Problema 10
def problema_10():
    """
    EXTRACCI√ìN DE ARCHIVO:
    Dada una ruta, extrae solo el nombre del archivo sin extensi√≥n.
    "/ruta/al/archivo/documento.pdf" -> "documento"
    """
    ruta = "C:/Users/Docs/informe_final.docx"
    # Tu c√≥digo aqu√≠
    return "informe_final"


# Problema 11
def problema_11():
    """
    NORMALIZAR TEXTO:
    Convierte texto a formato t√≠tulo, pero manteniendo
    art√≠culos en min√∫scula (el, la, los, las, de, del).
    """
    texto = "el se√±or de los anillos"
    # Tu c√≥digo aqu√≠
    return "El Se√±or de los Anillos"


# Problema 12
def problema_12():
    """
    CONTAR VOCALES Y CONSONANTES:
    Cuenta cu√°ntas vocales y consonantes hay en un texto.
    """
    texto = "Python Programming"
    # Tu c√≥digo aqu√≠
    return (4, 11)  # (vocales, consonantes)


# Problema 13
def problema_13():
    """
    VERIFICAR PAL√çNDROMO:
    Determina si una palabra es pal√≠ndromo (se lee igual al derecho y al rev√©s).
    """
    palabra = "reconocer"
    # Tu c√≥digo aqu√≠
    return True


# Problema 14
def problema_14():
    """
    EXTRACCI√ìN DE DATOS:
    Extrae el nombre y dominio de una lista de emails.
    """
    emails = ["ana@company.com", "pedro@empresa.org", "lucia@corp.net"]
    # Tu c√≥digo aqu√≠
    return [("ana", "company.com"), ("pedro", "empresa.org"), ("lucia", "corp.net")]


# Problema 15
def problema_15():
    """
    FORMATEAR MONEDA:
    Convierte un n√∫mero a formato de moneda con separadores.
    1234567.89 -> "$1,234,567.89"
    """
    monto = 9876543.21
    # Tu c√≥digo aqu√≠
    return "$9,876,543.21"


# Problema 16
def problema_16():
    """
    CODIFICAR URL:
    Reemplaza espacios por %20 y caracteres especiales por su encoding.
    """
    url = "mi documento final.pdf"
    # Tu c√≥digo aqu√≠
    return "mi%20documento%20final.pdf"


# Problema 17
def problema_17():
    """
    ANALIZAR LOG:
    Extrae las direcciones IP de un log de servidor.
    """
    log = "192.168.1.1 - GET /index.html\n10.0.0.2 - POST /login.php"
    # Tu c√≥digo aqu√≠
    return ["192.168.1.1", "10.0.0.2"]


# Problema 18
def problema_18():
    """
    GENERAR SLUG:
    Crea un slug para URL a partir de un t√≠tulo.
    "C√≥mo aprender Python en 30 d√≠as" -> "como-aprender-python-en-30-dias"
    """
    titulo = "Gu√≠a Completa de M√©todos en Python"
    # Tu c√≥digo aqu√≠
    return "guia-completa-de-metodos-en-python"


# Problema 19
def problema_19():
    """
    VALIDAR ISBN:
    Verifica si un c√≥digo ISBN-10 es v√°lido.
    """
    isbn = "0-306-40615-2"
    # Tu c√≥digo aqu√≠
    return True


# Problema 20
def problema_20():
    """
    EXTRACCI√ìN DE HASHTAGS:
    Extrae todos los hashtags de un texto.
    """
    texto = "Me encanta #Python y #DataScience #Aprendiendo"
    # Tu c√≥digo aqu√≠
    return ["#Python", "#DataScience", "#Aprendiendo"]


# Problema 21
def problema_21():
    """
    NORMALIZAR FECHA:
    Convierte fecha de formato "dd/mm/yyyy" a "yyyy-mm-dd"
    """
    fecha = "25/12/2024"
    # Tu c√≥digo aqu√≠
    return "2024-12-25"


# Problema 22
def problema_22():
    """
    CONTAR OCURRENCIAS DE PALABRA:
    Cuenta cu√°ntas veces aparece cada palabra en un texto.
    """
    texto = "python es genial python es poderoso"
    # Tu c√≥digo aqu√≠
    return {"python": 2, "es": 2, "genial": 1, "poderoso": 1}


# Problema 23
def problema_23():
    """
    REMOVER HTML TAGS:
    Elimina todas las etiquetas HTML de un texto.
    """
    html = "<div><p>Hola <b>mundo</b></p></div>"
    # Tu c√≥digo aqu√≠
    return "Hola mundo"


# Problema 24
def problema_24():
    """
    GENERAR ACR√ìNIMO:
    Crea un acr√≥nimo a partir de un nombre.
    "World Health Organization" -> "WHO"
    """
    nombre = "Asynchronous JavaScript and XML"
    # Tu c√≥digo aqu√≠
    return "AJAX"


# Problema 25
def problema_25():
    """
    VALIDAR PLACA:
    Verifica si una placa de auto tiene formato v√°lido (3 letras + 3 n√∫meros).
    """
    placa = "ABC123"
    # Tu c√≥digo aqu√≠
    return True


# Problema 26
def problema_26():
    """
    EXTRACCI√ìN DE DATOS CSV:
    Extrae la segunda columna de una l√≠nea CSV.
    """
    csv_line = "Juan,P√©rez,25,Engineer"
    # Tu c√≥digo aqu√≠
    return "P√©rez"


# Problema 27
def problema_27():
    """
    CODIFICACI√ìN CESAR:
    Aplica cifrado C√©sar con desplazamiento 3.
    "abc" -> "def"
    """
    texto = "hola mundo"
    # Tu c√≥digo aqu√≠
    return "krod pxqgr"


# Problema 28
def problema_28():
    """
    NORMALIZAR N√öMERO:
    Remueve todos los caracteres no num√©ricos de un n√∫mero telef√≥nico.
    "+52 (55) 1234-5678" -> "525512345678"
    """
    telefono = "+1 (800) 555-1234"
    # Tu c√≥digo aqu√≠
    return "18005551234"


# Problema 29
def problema_29():
    """
    VERIFICAR ANAGRAMA:
    Determina si dos palabras son anagramas.
    """
    palabra1 = "listen"
    palabra2 = "silent"
    # Tu c√≥digo aqu√≠
    return True


# Problema 30
def problema_30():
    """
    PROCESAR TWEET:
    Acorta un texto a 280 caracteres, agregando "..." si es necesario.
    """
    tweet = "Python es un lenguaje de programaci√≥n interpretado cuya filosof√≠a hace hincapi√© en la legibilidad de su c√≥digo. Se trata de un lenguaje de programaci√≥n multiparadigma, ya que soporta orientaci√≥n a objetos, programaci√≥n imperativa y, en menor medida, programaci√≥n funcional."
    # Tu c√≥digo aqu√≠
    return "Python es un lenguaje de programaci√≥n interpretado cuya filosof√≠a hace hincapi√© en la legibilidad de su c√≥digo. Se trata de un lenguaje de programaci√≥n multiparadigma, ya que..."


# Ejecutar todos los problemas
if __name__ == "__main__":
    problemas = [problema_1, problema_2, problema_3, problema_4, problema_5,
                 problema_6, problema_7, problema_8, problema_9, problema_10,
                 problema_11, problema_12, problema_13, problema_14, problema_15,
                 problema_16, problema_17, problema_18, problema_19, problema_20,
                 problema_21, problema_22, problema_23, problema_24, problema_25,
                 problema_26, problema_27, problema_28, problema_29, problema_30]

    print("Problemas cargados. Resu√©lvelos y verifica con el archivo soluciones.txt")
    print(f"Total de problemas: {len(problemas)}")